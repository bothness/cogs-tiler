<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>COGS Data Tiler (LSOAs)</title>
    <link href='https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css' rel='stylesheet' />
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0;
            font-family: 'Open Sans', sans-serif;
        }

        h2 {
            font-weight: 700;
            margin-top: 0;
        }

        #map {
            width: 100vw;
            height: 100vh;
        }

        #info {
            z-index: 100;
            position: absolute;
            top: 0;
            left: 0;
            margin: 0;
            padding: 30px 20px;
            max-width: 300px;
            background-color: white;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <div id="info">
        <h2>COGS Data Tiler</h2>
        <p><strong>Tiles loaded:</strong> <span id="tiles"></span></p>
        <p><strong>LSOAs loaded:</strong> <span id="areas"></span></p>
        <small>This demo loads data in tiled chunks from the <a href="http://statistics.data.gov.uk/sparql" target="_blank">ONS Geography Linked Data API</a>. (Areas turn green once data is loaded from the API.)</small>
    </div>
</body>

<script src='https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js'></script>
<script src="https://cdn.jsdelivr.net/npm/@mapbox/tilebelt@1.0.1/index.min.js"></script>
<script src="https://d3js.org/d3-dsv.v1.min.js"></script>
<script>

    const datazoom = 8; // Set the zoom level for data 'tiles'
    const api = 'https://pmd3-production-drafter-onsgeo.publishmydata.com/v1/sparql/live?query=';
    const tilesdiv = document.getElementById('tiles');
    const areasdiv = document.getElementById('areas');
    const locale = 'en-GB';
    var tiles = [];
    var loaded = [];
    var bounds = [];
    var data = [];

    // All map tiles covering England & Wales, format 'x,y,z'
    const alltiles = [
        '123,86,8',
        '124,86,8',
        '125,86,8',
        '126,86,8',
        '127,86,8',
        '124,85,8',
        '125,85,8',
        '126,85,8',
        '127,85,8',
        '128,85,8',
        '129,85,8',
        '124,84,8',
        '125,84,8',
        '126,84,8',
        '127,84,8',
        '128,84,8',
        '129,84,8',
        '124,83,8',
        '125,83,8',
        '126,83,8',
        '127,83,8',
        '128,83,8',
        '129,83,8',
        '124,82,8',
        '125,82,8',
        '126,82,8',
        '127,82,8',
        '128,82,8',
        '125,81,8',
        '126,81,8',
        '127,81,8',
        '125,80,8',
        '126,80,8',
    ];
    const maxtiles = alltiles.length;

    // Popup class for map tooltips
    const popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
    });

    // Returns array of one or more tiles at selected zoom level that cover the area of the selected tile
    // The input tile can be at any zoom level
    function tilesByZoom(tile, zoom) {
        let newtiles = [tile];
        let zoom_curr = +tile.split(',')[2];
        if (zoom_curr < zoom) {
            while (zoom_curr < zoom) {
                let temptiles = [];
                for (i in newtiles) {
                    let arr = newtiles[i].split(',').map(Number);
                    let children = getChildren(arr);
                    for (j in children) {
                        temptiles.push(children[j][0] + ',' + children[j][1] + ',' + children[j][2]);
                    }
                }
                newtiles = temptiles;
                zoom_curr += 1;
            }
        } else if (zoom_curr > zoom) {
            while (zoom_curr > zoom) {
                let arr = newtiles[0].split(',').map(Number);
                let parent = getParent(arr);
                newtiles = [parent[0] + ',' + parent[1] + ',' + parent[2]];
                zoom_curr -= 1;
            }
        }
        return newtiles;
    }

    // Returns the bounding box of a map tile, result format [xmin, ymin, xmax, ymax]
    function getBBOX(tile) {
        let arr = tile.split(',').map(Number);
        let bbox = tileToBBOX(arr).map(num => +num.toFixed(4));
        return bbox;
    }

    // Update legend
    function updateLegend() {
        tilesdiv.innerText = tiles.length.toLocaleString(locale);
        areasdiv.innerText = data.length.toLocaleString(locale);
    }

    // Function to add layers to mapp
    function makeLayers() {

        // Variable for highlighting areas
        let hoveredId = null;

        // Add boundaries tileset
        map.addSource('bounds', {
            "type": "vector",
            "promoteId": { "boundaries": "lsoa11cd" },
            "tiles": ["https://cdn.ons.gov.uk/maptiles/t26/boundaries/{z}/{x}/{y}.pbf"],
            "minzoom": 8,
            "maxzoom": 14
        });

        // Add layer from the vector tile source with data-driven style
        map.addLayer({
            id: 'bounds',
            type: 'fill',
            source: 'bounds',
            'source-layer': 'boundaries',
            "paint": {
                "fill-color": ['case',
                    ['!=', ['feature-state', 'loaded'], null],
                    'rgba(0, 255, 0, 0.2)',
                    'rgba(255, 0, 0, 0.2)'
                ]
            }
        }, 'boundary_country');

        map.addLayer({
            id: 'boundslines',
            type: 'line',
            source: 'bounds',
            'source-layer': 'boundaries',
            "paint": {
                "line-opacity": [
                    'case',
                    ['boolean', ['feature-state', 'hover'], false],
                    1,
                    0.15
                ],
                "line-color": "rgb(0,0,0)",
                "line-width": [
                    'case',
                    ['boolean', ['feature-state', 'hover'], false],
                    2,
                    0.5
                ]
            }
        }, 'boundary_country');

        // Add tooltips on hover
        map.on('mousemove', 'bounds', function (e) {
            if (e.features.length > 0) {
                if (hoveredId) {
                    map.setFeatureState(
                        { source: 'bounds', sourceLayer: 'boundaries', id: hoveredId },
                        { hover: false }
                    );
                }
                hoveredId = e.features[0].id;
                map.setFeatureState(
                    { source: 'bounds', sourceLayer: 'boundaries', id: hoveredId },
                    { hover: true }
                );

                // Change the cursor style as a UI indicator.
                map.getCanvas().style.cursor = 'pointer';

                let code = e.features[0].properties.oa11cd;

                let state = map.getFeatureState({
                    source: 'bounds',
                    sourceLayer: 'boundaries',
                    id: code
                });

                var description = '<strong>' + code + '</strong>';
                description += state.area ? '<br/>' + state.area + ' hectares' : '';

                // Populate the popup and set its coordinates
                // based on the feature found.
                popup
                    .setLngLat(e.lngLat)
                    .setHTML(description)
                    .addTo(map);
            }
        });

        // Remove tooltips on mouseleave
        map.on('mouseleave', 'bounds', function (e) {
            if (hoveredId) {
                map.setFeatureState(
                    { source: 'bounds', sourceLayer: 'boundaries', id: hoveredId },
                    { hover: false }
                );
            }
            hoveredId = null;

            map.getCanvas().style.cursor = '';
            popup.remove();
        });
    }

    function setProperties(data) {
        for (i in data) {
            if (data[i].code) {
                map.setFeatureState({
                    source: 'bounds',
                    sourceLayer: 'boundaries',
                    id: data[i].code
                }, {
                    loaded: true,
                    area: Math.round(+data[i].area).toLocaleString(locale)
                });
            }
        }
    }

    // Get data for tile by ID in array order
    function getData(bbox) {
        let query = encodeURIComponent(`SELECT DISTINCT ?code ?area
WHERE {
?postcode <http://publishmydata.com/def/ontology/foi/memberOf> <http://statistics.data.gov.uk/def/geography/collection/postcodes> ;
<http://statistics.data.gov.uk/def/spatialrelations/within#superoutputarealowerlayer> ?lsoa ;
<http://www.w3.org/2003/01/geo/wgs84_pos#lat> ?lat ;
<http://www.w3.org/2003/01/geo/wgs84_pos#long> ?lng .
?lsoa <http://www.w3.org/2000/01/rdf-schema#label> ?code ;
<http://statistics.data.gov.uk/def/measurement#hasExtentOfTheRealmHectarage> ?area .
FILTER (?lat > ${bbox[1]} && ?lat < ${bbox[3]}  && ?lng > ${bbox[0]} && ?lng < ${bbox[2]}) .
}
LIMIT 15000`);

        fetch(api + query)
            .then(response => response.text())
            .then(rawdata => d3.csvParse(rawdata))
            .then(array => {
                setProperties(array);
                data = [...data, ...array]
                updateLegend();
            })
    }

    // Initialise map
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'https://bothness.github.io/ons-basemaps/data/style-omt.json',
        center: [1.2974, 52.6309],
        zoom: 10,
        minZoom: 8,
        maxZoom: 14
    });

    map.on('load', makeLayers);

    // Event fires each time a map tile is loaded
    // NOTE: WILL HAVE TO BE MODIFIED TO RESPOND TO SINGLE TILE SOURCE IF MAP INCLUDES MULIPLE TILE LAYERS
    map.on('data', event => {
        if (tiles.length < maxtiles && event.tile && event.sourceId === 'bounds') {
            let tile = event.tile.tileID.canonical.x + ',' + event.tile.tileID.canonical.y + ',' + event.tile.tileID.canonical.z;
            if (event.tile.tileID.canonical.z !== datazoom) {
                let newtiles = tilesByZoom(tile, datazoom);
                for (i in newtiles) {
                    if (alltiles.includes(newtiles[i]) && !tiles.includes(newtiles[i])) {
                        tiles.push(newtiles[i]);
                        let bbox = getBBOX(newtiles[i]);
                        bounds.push(bbox);
                        getData(bbox);
                    }
                };
            } else if (event.tile.tileID.canonical.z === datazoom && alltiles.includes(tile) && !tiles.includes(tile)) {
                tiles.push(tile);
                let bbox = getBBOX(tile);
                bounds.push(bbox);
                getData(bbox);
            }
        }
    });
</script>

</html>